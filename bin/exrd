#!/bin/sh
# shellcheck disable=SC2004

# ExRD (Exclusively Restart Dnsmasq)
# This script just restarts the Dnsmasq daemon, essentially, but keeps it from failing by maneuvering exclusively.

set -u

LAST_UPDATE_FILE="/home/ubuntu/.tmp/restart_dnsmasq_last_update"
EXE_COUNT_FILE="/home/ubuntu/.tmp/restart_dnsmasq_exe_count"
TIME_THRESHOLD="11"
COUNT_THRESHOLD="1"
MAX_SLEEP_TIME="10"
XDG_RUNTIME_DIR="/run/user/$(id -u)"
export XDG_RUNTIME_DIR # for cron

main() {
  parse "$@"
  eval "set -- $REST"

  # comment out when debug
  if [ "$IGNORE_LOG" = 1 ]; then
    LOG=""
    FROM=""
  fi

  if [ "$SKIP" != "1" ]; then
    sleep_time=$(( $(od -An -N1 -t u1 /dev/urandom) % $MAX_SLEEP_TIME + 1 ))
    echo "Waiting for $sleep_time seconds before restarting the daemon..."
    sleep "$sleep_time"
  fi

  while [ "$(executable)" = "false" ]; do
    # do not encompass the variables (MAX_SLEEP_TIME) with double quotes
    sleep_time=$(( $(od -An -N1 -t u1 /dev/urandom) % $MAX_SLEEP_TIME + 1 ))
    echo "Restarting the daemon canceled because it's done many times in a row. Trying to restart the daemon in $sleep_time seconds..."
    sleep "$sleep_time"
  done

  if [ "$(executable)" = "true" ]; then
    sudo systemctl restart dnsmasq
    update_file
    print_debug_info "true"
  else
    print_debug_info "false"
  fi

  # temporarily disable this because it might cause the problem that the daemon fails to restart
  # if [ "$(sudo systemctl is-active dnsmasq)" != "active" ]; then
  #   sudo systemctl restart dnsmasq
  # fi

  # output info to a log file when the daemon failed to restart
  if [ "$LOG" != "" ] && [ "$(sudo systemctl is-active dnsmasq)" != "active" ]; then
    sleep 1 # to avoid "activating"
    log_debug_info
  else
    true
  fi
}

executable() {
  if ! [ -f "$LAST_UPDATE_FILE" ] && ! [ -f "$EXE_COUNT_FILE" ]; then
    echo "true"
  elif [ "$(( $(date +%s) - $(cat "$LAST_UPDATE_FILE") ))" -ge "$TIME_THRESHOLD" ]; then
    echo "true"
  elif [ "$(cat "$EXE_COUNT_FILE")" -lt "$COUNT_THRESHOLD" ]; then
    echo "true"
  else
    echo "false"
  fi
}

update_file() {
  if ! [ -f "$LAST_UPDATE_FILE" ]; then
    date +%s > "$LAST_UPDATE_FILE"
  fi

  if ! [ -f "$EXE_COUNT_FILE" ]; then
    echo "1" > "$EXE_COUNT_FILE"
    date +%s > "$LAST_UPDATE_FILE"
  elif [ "$(( $(date +%s) - $(cat "$LAST_UPDATE_FILE") ))" -ge "$TIME_THRESHOLD" ]; then
    echo "1" > "$EXE_COUNT_FILE"
    date +%s > "$LAST_UPDATE_FILE"
  elif [ "$(cat "$EXE_COUNT_FILE")" -lt "$COUNT_THRESHOLD" ]; then
    echo $(( $(cat "$EXE_COUNT_FILE") + 1 )) > "$EXE_COUNT_FILE"
  elif [ "$(cat "$EXE_COUNT_FILE")" -ge "$COUNT_THRESHOLD" ]; then
    echo "1" > "$EXE_COUNT_FILE"
    date +%s > "$LAST_UPDATE_FILE"
  fi
}

print_debug_info() {
  if [ "$(sudo systemctl is-active dnsmasq)" = "active" ]; then
    echo "Status:          \e[1;32m$(sudo systemctl is-active dnsmasq)\e[0m"
  else
    echo "Status:          \e[1;31m$(sudo systemctl is-active dnsmasq)\e[0m"
  fi

  if [ "$1" = "true" ]; then
    echo "Executable:      \e[1;32m$1\e[0m"
  else
    echo "Executable:      \e[1;31m$1\e[0m"
  fi

  if [ "$(cat $EXE_COUNT_FILE)" = "1" ]; then
    echo "Execution count: \e[1;32m$(cat $EXE_COUNT_FILE)\e[0m"
  else
    echo "Execution count: \e[1;31m$(cat $EXE_COUNT_FILE)\e[0m"
  fi

  echo "Current time:    $(date +%s)"
  echo "Last update:     $(cat $LAST_UPDATE_FILE)"
}

log_debug_info() {
  current_time=$(date +'%a %b %d %r %Y')
  num=$(cat "$EXE_COUNT_FILE")
  state=$(sudo systemctl is-active dnsmasq)

  [ "$num" = "" ] && num="?"

  echo "Restarted the daemon (date: \"$current_time\", count: \"$num\", status: \"$state\", from: \"$FROM\")" >> "$LOG"
}

# @getoptions
parser_definition() {
  setup   REST help:usage -- "Usage: exrd [options]... [arguments]..." ''
  msg -- 'Options:'
  flag   SKIP          --skip       -- "skip the first sleep"
  param  LOG           --log        -- "output the log to the specified file"
  flag   IGNORE_LOG    --ignore-log -- "ignore '--log' even if it is set"
  param  FROM          --from       -- "contain where this script is invoked to the log"
  disp  :usage      -h --help       -- "show the help message and exit"
  disp  VERSION        --version    -- "show the current version and exit"
}
# @end

# @gengetoptions parser -i parser_definition parse
# Generated by getoptions (BEGIN)
# URL: https://github.com/ko1nksm/getoptions (v3.3.0)
SKIP=''
LOG=''
IGNORE_LOG=''
FROM=''
REST=''
parse() {
  OPTIND=$(($#+1))
  while OPTARG= && [ $# -gt 0 ]; do
    case $1 in
      --?*=*) OPTARG=$1; shift
        eval 'set -- "${OPTARG%%\=*}" "${OPTARG#*\=}"' ${1+'"$@"'}
        ;;
      --no-*|--without-*) unset OPTARG ;;
      -[h]?*) OPTARG=$1; shift
        eval 'set -- "${OPTARG%"${OPTARG#??}"}" -"${OPTARG#??}"' ${1+'"$@"'}
        OPTARG= ;;
    esac
    case $1 in
      '--skip')
        [ "${OPTARG:-}" ] && OPTARG=${OPTARG#*\=} && set "noarg" "$1" && break
        eval '[ ${OPTARG+x} ] &&:' && OPTARG='1' || OPTARG=''
        SKIP="$OPTARG"
        ;;
      '--log')
        [ $# -le 1 ] && set "required" "$1" && break
        OPTARG=$2
        LOG="$OPTARG"
        shift ;;
      '--ignore-log')
        [ "${OPTARG:-}" ] && OPTARG=${OPTARG#*\=} && set "noarg" "$1" && break
        eval '[ ${OPTARG+x} ] &&:' && OPTARG='1' || OPTARG=''
        IGNORE_LOG="$OPTARG"
        ;;
      '--from')
        [ $# -le 1 ] && set "required" "$1" && break
        OPTARG=$2
        FROM="$OPTARG"
        shift ;;
      '-h'|'--help')
        usage
        exit 0 ;;
      '--version')
        echo "${VERSION}"
        exit 0 ;;
      --)
        shift
        while [ $# -gt 0 ]; do
          REST="${REST} \"\${$(($OPTIND-$#))}\""
          shift
        done
        break ;;
      [-]?*) set "unknown" "$1"; break ;;
      *)
        REST="${REST} \"\${$(($OPTIND-$#))}\""
    esac
    shift
  done
  [ $# -eq 0 ] && { OPTIND=1; unset OPTARG; return 0; }
  case $1 in
    unknown) set "Unrecognized option: $2" "$@" ;;
    noarg) set "Does not allow an argument: $2" "$@" ;;
    required) set "Requires an argument: $2" "$@" ;;
    pattern:*) set "Does not match the pattern (${1#*:}): $2" "$@" ;;
    notcmd) set "Not a command: $2" "$@" ;;
    *) set "Validation error ($1): $2" "$@"
  esac
  echo "$1" >&2
  exit 1
}
usage() {
cat<<'GETOPTIONSHERE'
Usage: exrd [options]... [arguments]...

Options:
      --skip                  skip the first sleep
      --log LOG               output the log to the specified file
      --ignore-log            ignore '--log' even if it is set
      --from FROM             contain where this script is invoked to the log
  -h, --help                  show the help message and exit
      --version               show the current version and exit
GETOPTIONSHERE
}
# Generated by getoptions (END)
# @end

main "$@"
